server:
  port: 9090
spring:
  data:
    redis:
      host: redis
      port: 6379
  # 어플리케이션을 식별하는 명칭
  application:
    name: APT-GATEWAY
  config:
    # 쿠버네티스에서는 서비스 이름을 통해서 직접 접근이 가능하기 때문에
    # URL 을 넘겨줄 필요가 없음
    import: configserver:${CONFIG_SERVER_URL:http://localhost:9296}
  cloud:
    gateway:
      routes:
        # order-service 에서 spring.application.name 에 입력한 값
        - id: ORDER-SERVICE
          # Eureka 의존성을 걷어냄
          # 쿠버네티스가 지원하는 내부 서버 통신을 사용
          # lb://ORDER-SERVICE 에서 변경
          uri: http://order-service-svc
          # /order/ 로 시작하는 모든 엔드포인트를 지정
          predicates:
            - Path=/order/**
          filters:
            - name: CircuitBreaker
              args:
                name: ORDER-SERVICE
                fallbackuri: forward:/orderServiceFallback
            - name: RequestRateLimiter
              args:
                "[redis-rate-limiter.replenishRate]": 1
                "[redis-rate-limiter.burstCapacity]": 1
        - id: PRODUCT-SERVICE
          uri: http://product-service-svc
          predicates:
            - Path=/product/**
          filters:
            - name: CircuitBreaker
              args:
                name: PRODUCT-SERVICE
                fallbackuri: forward:/productServiceFallback
            - name: RequestRateLimiter
              args:
                "[redis-rate-limiter.replenishRate]": 1
                "[redis-rate-limiter.burstCapacity]": 1
        - id: PAYMENT-SERVICE
          uri: http://payment-service-svc
          predicates:
            - Path=/payment/**
          filters:
            - name: CircuitBreaker
              args:
                name: PAYMENT-SERVICE
                fallbackuri: forward:/paymentServiceFallback
            - name: RequestRateLimiter
              args:
                "[redis-rate-limiter.replenishRate]": 1
                "[redis-rate-limiter.burstCapacity]": 1